<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on IYP UK</title>
    <link>https://www.iyp-uk.com/tags/kafka/</link>
    <description>Recent content in Kafka on IYP UK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 04 May 2018 14:30:33 +0100</lastBuildDate>
    
	<atom:link href="https://www.iyp-uk.com/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kafka JMX</title>
      <link>https://www.iyp-uk.com/blog/kafka-jmx/</link>
      <pubDate>Fri, 04 May 2018 14:30:33 +0100</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/kafka-jmx/</guid>
      <description>How to: JMX and Kafka There are many many ways to read from JMX in general.
We will show here 2 ways:
 using a GUI-based JMX-client: jconsole using a cli JMX-client: jmxterm  Running kafka You can run kafka the way you want.
In order to get JMX, you just need to set the JMX_PORT environment variable to an open port (usually 9999) before you start kafka.
If you use the iyp-uk.</description>
    </item>
    
    <item>
      <title>Streaming Applications</title>
      <link>https://www.iyp-uk.com/blog/streaming-applications/</link>
      <pubDate>Fri, 17 Nov 2017 09:46:54 +0000</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/streaming-applications/</guid>
      <description>What&amp;rsquo;s the plan? The plan is to define a distributed architecture to get streams and make some sense out of it.
We will create:
   Component Role     Producer Produce streams of (potentially heterogeneous) data   API Gateway Is the entry point to the collection of services   Stream Processor Manages the incoming stream, transforms and allow services to consume   Data warehouse OLAP for streams   Web app A web app, exposing some of the data to a portal    Ok let&amp;rsquo;s start Easy Peasy as it&amp;rsquo;s a vast program here: Producer.</description>
    </item>
    
  </channel>
</rss>