<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on IYP UK</title>
    <link>https://www.iyp-uk.com/tags/docker/</link>
    <description>Recent content in Docker on IYP UK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 21 Nov 2017 12:17:29 +0000</lastBuildDate>
    
	<atom:link href="https://www.iyp-uk.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scale With Docker Swarm</title>
      <link>https://www.iyp-uk.com/blog/scale-with-docker-swarm/</link>
      <pubDate>Tue, 21 Nov 2017 12:17:29 +0000</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/scale-with-docker-swarm/</guid>
      <description>What&amp;rsquo;s the plan In this article, we will demonstrate how to scale your app with docker swarm.
Definitions Swarm A docker swarm is a group of docker hosts operating in swarm mode. Every docker host can be:
 A manager  Manages orchestration of the workers  A worker  Run containers as part of a service (see below for service defintion)  Both at the same time  Node A docker node is an instance of the docker engine.</description>
    </item>
    
    <item>
      <title>Streaming Applications</title>
      <link>https://www.iyp-uk.com/blog/streaming-applications/</link>
      <pubDate>Fri, 17 Nov 2017 09:46:54 +0000</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/streaming-applications/</guid>
      <description>What&amp;rsquo;s the plan? The plan is to define a distributed architecture to get streams and make some sense out of it.
We will create:
   Component Role     Producer Produce streams of (potentially heterogeneous) data   API Gateway Is the entry point to the collection of services   Stream Processor Manages the incoming stream, transforms and allow services to consume   Data warehouse OLAP for streams   Web app A web app, exposing some of the data to a portal    Ok let&amp;rsquo;s start Easy Peasy as it&amp;rsquo;s a vast program here: Producer.</description>
    </item>
    
    <item>
      <title>Gitlab Review Apps</title>
      <link>https://www.iyp-uk.com/blog/gitlab-review-apps/</link>
      <pubDate>Tue, 14 Nov 2017 16:20:25 +0000</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/gitlab-review-apps/</guid>
      <description>Let&amp;rsquo;s have a look at Gitlab&amp;rsquo;s review Apps, available for GitLab.com, GitLab Community Edition, and GitLab Enterprise Edition.
So what&amp;rsquo;s the plan? In this particular example, we will showcase Gitlab&amp;rsquo;s review apps in the context of a trivial docker-based python app. This app essentially returns an &amp;ldquo;Hello world&amp;rdquo;.
Gitlab CI allows us to do plenty of things, and in particular we will want to:
 Build the docker image Run tests Deploy the app to Heroku   The source code is available on gitlab.</description>
    </item>
    
    <item>
      <title>TDD Django Docker</title>
      <link>https://www.iyp-uk.com/blog/tdd-django-docker/</link>
      <pubDate>Sun, 29 Oct 2017 10:06:26 +0000</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/tdd-django-docker/</guid>
      <description>What you will learn here We will go through the current Django tutorial with a particular focus on TDD and using Docker.
 This tutorial presents a polls application.
 Prerequisites Check you have the required software on your machine.
$ docker -v Docker version 17.09.0-ce, build afdb6d4  $ docker-compose -v docker-compose version 1.16.1, build 6d1ac21  Getting started We will be running Django along with a PostgreSQL database.</description>
    </item>
    
    <item>
      <title>Docker Compose Python Eve Mongodb</title>
      <link>https://www.iyp-uk.com/blog/docker-compose-python-eve-mongodb/</link>
      <pubDate>Fri, 18 Aug 2017 14:47:35 +0100</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/docker-compose-python-eve-mongodb/</guid>
      <description>PyCharm As a Python developer you are probably familiar with PyCharm, an amazing IDE from JetBrains. If you don&amp;rsquo;t know anything about it, have a look, you&amp;rsquo;ll probably not regret it :) Some of the steps in this article will make mention of PyCharm, however, it&amp;rsquo;s not required and you can still follow if you&amp;rsquo;re using another IDE. If you&amp;rsquo;re not using any IDE, well, god save your soul.</description>
    </item>
    
    <item>
      <title>Gardenlog With React, Node and Docker</title>
      <link>https://www.iyp-uk.com/blog/gardenlog-with-react-node-and-docker/</link>
      <pubDate>Mon, 31 Jul 2017 12:01:35 +0100</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/gardenlog-with-react-node-and-docker/</guid>
      <description>This will show the rewriting of a project using different technologies.
What is Gardenlog? Gardenlog is a project which:
 monitors garden (even if it could be anything), gathering all sorts of meteorological information allows users to interact with it   IYP UK has built it using several technologies:
 Backend: Python and Elasticsearch Frontend: Angular 4 with Material Hosting: All hosted on AWS, apart from the physical part, running on a raspberry pi   Scope of this project In this project, we will rewrite a good part of the Gardenlog project to demonstrate use of the following:</description>
    </item>
    
    <item>
      <title>Nodejs Docker And Aws</title>
      <link>https://www.iyp-uk.com/blog/nodejs-docker-and-aws/</link>
      <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.iyp-uk.com/blog/nodejs-docker-and-aws/</guid>
      <description>In this post, we will make use of NodeJS and Docker to provide and API which interfaces with an Elasticsearch instance in AWS.
Assuming you already have an AWS account, and aws-cli set up.
Process  Write the NodeJS app locally Wrap it a docker image and deploy this image to a registry (we will use docker hub here) Use AWS ECS (EC2 Container Service) to deploy and scale your app in the cloud.</description>
    </item>
    
  </channel>
</rss>